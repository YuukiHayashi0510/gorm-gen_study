// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"study/internal/db/model"
)

func newSubCategory(db *gorm.DB, opts ...gen.DOOption) subCategory {
	_subCategory := subCategory{}

	_subCategory.subCategoryDo.UseDB(db, opts...)
	_subCategory.subCategoryDo.UseModel(&model.SubCategory{})

	tableName := _subCategory.subCategoryDo.TableName()
	_subCategory.ALL = field.NewAsterisk(tableName)
	_subCategory.SubCategoryID = field.NewString(tableName, "sub_category_id")
	_subCategory.CategoryID = field.NewString(tableName, "category_id")
	_subCategory.SubCategoryName = field.NewString(tableName, "sub_category_name")
	_subCategory.Category = subCategoryBelongsToCategory{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Category", "model.Category"),
	}

	_subCategory.fillFieldMap()

	return _subCategory
}

type subCategory struct {
	subCategoryDo

	ALL             field.Asterisk
	SubCategoryID   field.String
	CategoryID      field.String
	SubCategoryName field.String
	Category        subCategoryBelongsToCategory

	fieldMap map[string]field.Expr
}

func (s subCategory) Table(newTableName string) *subCategory {
	s.subCategoryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subCategory) As(alias string) *subCategory {
	s.subCategoryDo.DO = *(s.subCategoryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subCategory) updateTableName(table string) *subCategory {
	s.ALL = field.NewAsterisk(table)
	s.SubCategoryID = field.NewString(table, "sub_category_id")
	s.CategoryID = field.NewString(table, "category_id")
	s.SubCategoryName = field.NewString(table, "sub_category_name")

	s.fillFieldMap()

	return s
}

func (s *subCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subCategory) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["sub_category_id"] = s.SubCategoryID
	s.fieldMap["category_id"] = s.CategoryID
	s.fieldMap["sub_category_name"] = s.SubCategoryName

}

func (s subCategory) clone(db *gorm.DB) subCategory {
	s.subCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subCategory) replaceDB(db *gorm.DB) subCategory {
	s.subCategoryDo.ReplaceDB(db)
	return s
}

type subCategoryBelongsToCategory struct {
	db *gorm.DB

	field.RelationField
}

func (a subCategoryBelongsToCategory) Where(conds ...field.Expr) *subCategoryBelongsToCategory {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a subCategoryBelongsToCategory) WithContext(ctx context.Context) *subCategoryBelongsToCategory {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a subCategoryBelongsToCategory) Session(session *gorm.Session) *subCategoryBelongsToCategory {
	a.db = a.db.Session(session)
	return &a
}

func (a subCategoryBelongsToCategory) Model(m *model.SubCategory) *subCategoryBelongsToCategoryTx {
	return &subCategoryBelongsToCategoryTx{a.db.Model(m).Association(a.Name())}
}

type subCategoryBelongsToCategoryTx struct{ tx *gorm.Association }

func (a subCategoryBelongsToCategoryTx) Find() (result *model.Category, err error) {
	return result, a.tx.Find(&result)
}

func (a subCategoryBelongsToCategoryTx) Append(values ...*model.Category) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a subCategoryBelongsToCategoryTx) Replace(values ...*model.Category) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a subCategoryBelongsToCategoryTx) Delete(values ...*model.Category) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a subCategoryBelongsToCategoryTx) Clear() error {
	return a.tx.Clear()
}

func (a subCategoryBelongsToCategoryTx) Count() int64 {
	return a.tx.Count()
}

type subCategoryDo struct{ gen.DO }

type ISubCategoryDo interface {
	gen.SubQuery
	Debug() ISubCategoryDo
	WithContext(ctx context.Context) ISubCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubCategoryDo
	WriteDB() ISubCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubCategoryDo
	Not(conds ...gen.Condition) ISubCategoryDo
	Or(conds ...gen.Condition) ISubCategoryDo
	Select(conds ...field.Expr) ISubCategoryDo
	Where(conds ...gen.Condition) ISubCategoryDo
	Order(conds ...field.Expr) ISubCategoryDo
	Distinct(cols ...field.Expr) ISubCategoryDo
	Omit(cols ...field.Expr) ISubCategoryDo
	Join(table schema.Tabler, on ...field.Expr) ISubCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubCategoryDo
	Group(cols ...field.Expr) ISubCategoryDo
	Having(conds ...gen.Condition) ISubCategoryDo
	Limit(limit int) ISubCategoryDo
	Offset(offset int) ISubCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubCategoryDo
	Unscoped() ISubCategoryDo
	Create(values ...*model.SubCategory) error
	CreateInBatches(values []*model.SubCategory, batchSize int) error
	Save(values ...*model.SubCategory) error
	First() (*model.SubCategory, error)
	Take() (*model.SubCategory, error)
	Last() (*model.SubCategory, error)
	Find() ([]*model.SubCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SubCategory, err error)
	FindInBatches(result *[]*model.SubCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SubCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubCategoryDo
	Assign(attrs ...field.AssignExpr) ISubCategoryDo
	Joins(fields ...field.RelationField) ISubCategoryDo
	Preload(fields ...field.RelationField) ISubCategoryDo
	FirstOrInit() (*model.SubCategory, error)
	FirstOrCreate() (*model.SubCategory, error)
	FindByPage(offset int, limit int) (result []*model.SubCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s subCategoryDo) Debug() ISubCategoryDo {
	return s.withDO(s.DO.Debug())
}

func (s subCategoryDo) WithContext(ctx context.Context) ISubCategoryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subCategoryDo) ReadDB() ISubCategoryDo {
	return s.Clauses(dbresolver.Read)
}

func (s subCategoryDo) WriteDB() ISubCategoryDo {
	return s.Clauses(dbresolver.Write)
}

func (s subCategoryDo) Session(config *gorm.Session) ISubCategoryDo {
	return s.withDO(s.DO.Session(config))
}

func (s subCategoryDo) Clauses(conds ...clause.Expression) ISubCategoryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subCategoryDo) Returning(value interface{}, columns ...string) ISubCategoryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subCategoryDo) Not(conds ...gen.Condition) ISubCategoryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subCategoryDo) Or(conds ...gen.Condition) ISubCategoryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subCategoryDo) Select(conds ...field.Expr) ISubCategoryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subCategoryDo) Where(conds ...gen.Condition) ISubCategoryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subCategoryDo) Order(conds ...field.Expr) ISubCategoryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subCategoryDo) Distinct(cols ...field.Expr) ISubCategoryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subCategoryDo) Omit(cols ...field.Expr) ISubCategoryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subCategoryDo) Join(table schema.Tabler, on ...field.Expr) ISubCategoryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubCategoryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubCategoryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subCategoryDo) Group(cols ...field.Expr) ISubCategoryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subCategoryDo) Having(conds ...gen.Condition) ISubCategoryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subCategoryDo) Limit(limit int) ISubCategoryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subCategoryDo) Offset(offset int) ISubCategoryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubCategoryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subCategoryDo) Unscoped() ISubCategoryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s subCategoryDo) Create(values ...*model.SubCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subCategoryDo) CreateInBatches(values []*model.SubCategory, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subCategoryDo) Save(values ...*model.SubCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subCategoryDo) First() (*model.SubCategory, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubCategory), nil
	}
}

func (s subCategoryDo) Take() (*model.SubCategory, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubCategory), nil
	}
}

func (s subCategoryDo) Last() (*model.SubCategory, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubCategory), nil
	}
}

func (s subCategoryDo) Find() ([]*model.SubCategory, error) {
	result, err := s.DO.Find()
	return result.([]*model.SubCategory), err
}

func (s subCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SubCategory, err error) {
	buf := make([]*model.SubCategory, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subCategoryDo) FindInBatches(result *[]*model.SubCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subCategoryDo) Attrs(attrs ...field.AssignExpr) ISubCategoryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subCategoryDo) Assign(attrs ...field.AssignExpr) ISubCategoryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subCategoryDo) Joins(fields ...field.RelationField) ISubCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subCategoryDo) Preload(fields ...field.RelationField) ISubCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subCategoryDo) FirstOrInit() (*model.SubCategory, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubCategory), nil
	}
}

func (s subCategoryDo) FirstOrCreate() (*model.SubCategory, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubCategory), nil
	}
}

func (s subCategoryDo) FindByPage(offset int, limit int) (result []*model.SubCategory, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subCategoryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subCategoryDo) Delete(models ...*model.SubCategory) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subCategoryDo) withDO(do gen.Dao) *subCategoryDo {
	s.DO = *do.(*gen.DO)
	return s
}
